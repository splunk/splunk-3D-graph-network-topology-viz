<form stylesheet="searchcontrolsevents.css" theme="dark" version="1.1">
  <label>Minimum Spanning Tree</label>
  <fieldset submitButton="false"></fieldset>
  <row>
    <panel depends="$alwaysHidePanel$">
      <input type="text" token="search">
        <label>search</label>
      </input>
      <input type="text" token="source">
        <label>source</label>
      </input>
      <input type="text" token="destination">
        <label>destination</label>
      </input>
      <input type="text" token="weight">
        <label>weight</label>
      </input>
      <input type="time" token="time">
        <label></label>
        <default>
          <earliest>-24h@h</earliest>
          <latest>now</latest>
        </default>
      </input>
    </panel>
  </row>
  <row>
    <panel>
      <html>
        <div class="ga_general_info">
          <div class="pull-left">
            <i class="icon-info large"/>
          </div>
          <div class="pull-right">
            <p>A <a class="external" href="https://en.wikipedia.org/wiki/Minimum_spanning_tree">Minimum Spanning Tree</a>  is an algorithm that aims to determine the nodes and connections that form the shortest path across the network - or the 'spine' of the network. It analyses the nodes and connections across a given network and includes each connection in turn starting with the connection with the lowest weighting until all the nodes are connected, ignoring any connections that create a cycle in the network. Combined with some centrality measures it can help identify the most important path across a network.</p>
          </div>
        </div>
      </html>
    </panel>
  </row>
  <row>
    <panel>
      <viz type="splunk-3D-graph-network-topology-viz.3d_graph_network_topology_viz">
        <title>Network Spine Visualisation</title>
        <search base="base">
          <query>| table $source$ $destination$ *
| sort - "$source$"</query>
        </search>
        <option name="drilldown">none</option>
        <option name="height">659</option>
        <option name="refresh.display">progressbar</option>
        <option name="splunk-3D-graph-network-topology-viz.3d_graph_network_topology_viz.bgColor">#222527</option>
        <option name="splunk-3D-graph-network-topology-viz.3d_graph_network_topology_viz.cameraController">trackball</option>
        <option name="splunk-3D-graph-network-topology-viz.3d_graph_network_topology_viz.dagMode">null</option>
        <option name="splunk-3D-graph-network-topology-viz.3d_graph_network_topology_viz.enable3D">0</option>
        <option name="splunk-3D-graph-network-topology-viz.3d_graph_network_topology_viz.lkColor">#777777</option>
        <option name="splunk-3D-graph-network-topology-viz.3d_graph_network_topology_viz.ndColor">#999999</option>
        <option name="splunk-3D-graph-network-topology-viz.3d_graph_network_topology_viz.showAnimationBar">1</option>
        <option name="splunk-3D-graph-network-topology-viz.3d_graph_network_topology_viz.showNodeLabels">0</option>
      </viz>
    </panel>
  </row>
  <row>
    <panel>
      <table>
        <title>Input Data</title>
        <search id="base">
          <query>$search$ 
| table $source$ $destination$ $weight$ 
| fit GraphCentrality $source$ $destination$ compute="betweenness_centrality,eigenvector_centrality,cluster_coefficient"
| rename eigenvector_centrality as graph_eigenvector_centrality betweenness_centrality as graph_betweenness_centrality cluster_coefficient as graph_cluster_coefficient
| eval src_value = ln($weight$+1)
| eventstats mean(graph_*) as mean_* max(graph_*) as max_* max(src_value) as max_src_value
| eval src_weight_eigen=graph_eigenvector_centrality/max_eigenvector_centrality
| eval src_weight_cluster=graph_cluster_coefficient/max_cluster_coefficient
| eval src_weight_betweenness=graph_betweenness_centrality/max_betweenness_centrality
| eval src_value=src_value/max_src_value
| eval cB=replace(toString(floor(55+src_weight_eigen*200),"hex"),"0x","")
| eval cB=substr("00", 0, max(2-len(cB), 0)).cB
| eval cG=replace(toString(floor(55+src_weight_cluster*200),"hex"),"0x","")
| eval cG=substr("00", 0, max(2-len(cG), 0)).cG
| eval cR=replace(toString(floor(55+src_weight_betweenness*200),"hex"),"0x","")
| eval cR=substr("00", 0, max(2-len(cR), 0)).cR
| eval cE=replace(toString(floor(55+src_value*200),"hex"),"0x","")
| eval cE=substr("00", 0, max(2-len(cE), 0)).cE
| eval color_src="#".cR.cG.cB
| eval edge_color="#".cE."4444"
| eval edge_weight=1.0+4.0*src_value
| eval weight_src=7.0*(src_weight_eigen+src_weight_cluster+src_weight_betweenness)+1.0
| table $source$ $destination$ color_src weight_src edge_color edge_weight $weight$
| eventstats max($weight$) as max_count
| eval weight=(1-($weight$/max_count))
| fit MinimumSpanningTree $source$ $destination$ weight='weight'</query>
          <earliest>$time.earliest$</earliest>
          <latest>$time.latest$</latest>
          <sampleRatio>1</sampleRatio>
        </search>
        <option name="count">20</option>
        <option name="dataOverlayMode">none</option>
        <option name="drilldown">none</option>
        <option name="percentagesRow">false</option>
        <option name="rowNumbers">false</option>
        <option name="totalsRow">false</option>
        <option name="wrap">true</option>
      </table>
    </panel>
  </row>
</form>