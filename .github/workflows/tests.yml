name: tests

on:
  pull_request:
    branches:
      - master
      - develop

jobs:
  slim-validate:
    name: SLIM Validation
    runs-on: ubuntu-latest
    outputs:
      app_name: ${{ steps.appinfo.outputs.app_name }}
      app_id: ${{ steps.appinfo.outputs.app_id }}
    steps:
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Fetch and set app info
        id: appinfo
        run: |
          APP_ID=$(cat packages/splunk-*/app.manifest | jq -r '.info.id.name')
          echo "app_id=${APP_ID}" >> $GITHUB_OUTPUT
          APP_NAME=$(echo "$APP_ID" | tr _ - )
          echo "app_name=${APP_NAME}" >> $GITHUB_OUTPUT

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install splunk-packaging-toolkit

      - name: Slim Validate
        run: |
          cp README.md packages/${{ steps.appinfo.outputs.app_id }}
          slim validate packages/${{ steps.appinfo.outputs.app_id }}


  splunk-test:
    name: Deploy and test the Viz
    runs-on: ubuntu-latest
    needs: slim-validate
    strategy:
      matrix:
        version: [9.1]
        # version: [9.1, 9.0, 8.2.0]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install docker compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.2.2/docker-compose-linux-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Launch Splunk via docker compose
        env:
          # Set for splunk container. Adding 'em to .env file for the configurator container 
          SPLUNK_VERSION: ${{ matrix.version }}
          SPLUNK_PASSWORD: password
          SPLUNKBASE_USERNAME: ${{ secrets.SPLUNKBASE_USERNAME }}
          SPLUNKBASE_PASSWORD: ${{ secrets.SPLUNKBASE_PASSWORD }} 
        run: |
          cat >> .env << 'END'
          SPLUNK_PASSWORD=password
          SPLUNKBASE_USERNAME="${{ secrets.SPLUNKBASE_USERNAME }}"
          SPLUNKBASE_PASSWORD="${{ secrets.SPLUNKBASE_PASSWORD }}" 
          END
          ls -la .
          echo "Launching Splunk"
          make setup

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18

      # - name: Copy app to service container and validate
      #   run: |
      #     docker cp packages/${{ needs.slim-validate.outputs.app_id }} ${{ job.services.splunk.id }}:/opt/splunk/etc/apps/${{ needs.slim-validate.outputs.app_id }}
      #     docker exec -i ${{ job.services.splunk.id }} ls -a /opt/splunk/etc/apps
      #     docker exec -i ${{ job.services.splunk.id }} ls -a /opt/splunk/etc/apps/${{ needs.slim-validate.outputs.app_id }}

      # - name: Restart instance
      #   run: |
      #     curl -k -u admin:password https://localhost:8089/services/server/control/restart -X POST
      #     sleep 30
      
      - name: Check MLTK permissions
        run: |
          curl -k -u admin:password https://splunk4viz:8089/services/apps/local/Splunk_ML_Toolkit/acl?output_mode=json | jq -r '.entry | .[].acl.sharing'

      # - name: Configure MLTK permissions
      #   run: |
      #     curl --retry-delay 5 --retry 5 -f -k -u admin:password https://localhost:8089/services/apps/local/Splunk_ML_Toolkit/acl -d sharing=global -d owner=nobody -X POST
      #     echo "Check MLTK permissions"
      #     curl -k -u admin:password https://localhost:8089/services/apps/local/Splunk_ML_Toolkit/acl?output_mode=json | jq -r '.entry | .[].acl.sharing'

      - name: Print App Configuration
        run: |
          curl -k -u admin:password https://splunk4viz:8089/services/apps/local/${{ needs.slim-validate.outputs.app_id }}

      - name: Run Tests
        run: |
          docker exec -i splunk4viz ls -la .
          docker exec -i splunk4viz npm --version

      - name: Upload Test Results
        uses: actions/upload-artifact@v3
        with:
          name: splunk${{ matrix.versions }}-results
          path: |
            test/cypress/videos

      - name: JUnit Report
        uses: dorny/test-reporter@v1
        # if: always()
        with:
          name: Cypress Tests
          path: cypress/results/results.xml
          reporter: java-junit
          fail-on-error: true
